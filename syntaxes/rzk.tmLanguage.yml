$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
comment: This TextMate Grammar file has been generated from a YAML file.
name: rzk-1
patterns:
  - match: ^(#lang)\s+((?![-?!.])[^.\\;,#"\]\[)(}{><|\s]*)(?=$|[.\\;,#"\]\[)(}{><|\s])\s*$
    captures:
      "1":
        name: keyword.control.lang.rzk
      "2":
        name: entity.name.label.rzk
  - match: ^(#check|#compute(-whnf|-nf)?|#set-option|#unset-option)(?=$|[.\\;,#"\]\[)(}{><|\s-])
    captures:
      "1":
        name: keyword.control.rzk
  - match: ^(#section|#end)(\s+(?![-?!.])[^.\\;,#"\]\[)(}{><|\s]*)?(?=$|[.\\;,#"\]\[)(}{><|\s])
    captures:
      "1":
        name: keyword.control.rzk
      "2":
        name: support.constant.property-value.rzk
  - match: ^(#assume|#variable|#variables)\s+((?![-?!.])[^.\\;,#"\]\[)(}{><|\s:]*)(?=$|[.\\;,#"\]\[)(}{><|\s])
    captures:
      "1":
        name: meta.preprocessor.rzk
      "2":
        name: variable.rzk
  - match: ^(#def|#define|#postulate)\s+((?![-?!.])[^.\\;,#"\]\[)(}{><|\s]*)(?=$|[.\\;,#"\]\[)(}{><|\s])(\s+(uses)\s+\(((?![-?!.])[^.\\;,#"\]\[)(}{><|]*)\))?
    captures:
      "1":
        name: meta.preprocessor.rzk
      "2":
        name: entity.name.function.rzk
      "4":
        name: support.constant.property-value.rzk
      "5":
        name: variable.parameter.rzk
  - include: "#strings"
  - include: "#terms"
repository:
  terms:
    patterns:
      - include: "#index-types"
      - include: "#builtins"
      - include: "#params"
      - include: "#comments"
      - include: "#ext-types"
      - include: "#lambda-abstractions"
      - include: "#operators"
  builtins:
    patterns:
      - name: support.type.rzk
        match: (?<=^|[.\\;,#"\]\[)(}{><|\s])(CUBE|TOPE|U|𝒰)(?=$|[.\\;,#"\]\[)(}{><|\s])
      - name: entity.name.type.rzk
        match: (?<=^|[.\\;,#"\]\[)(}{><|\s])(1|2|Sigma|∑|Σ)(?=$|[.\\;,#"\]\[)(}{><|\s])
      - name: string.regexp
        match: (===|<=|\\/|/\\|≡|≤|∨|∧)
      - name: support.constant.rzk
        match: (⊤|⊥|\*(_1|₁)|⋆)|(?<=^|[.\\;,#"\]\[)(}{><|\s])(0(_2|₂)|1(_2|₂)|TOP|BOT)(?=$|[.\\;,#"\]\[)(}{><|\s])
      - name: support.function.rzk
        match: (?<=^|[.\\;,#"\]\[)(}{><|\s])(recOR|recBOT|idJ|refl|first|second|π₁|π₂)((?=$|[.\\;,#"\]\[)(}{><|\s])|(?=_{))
      - name: keyword.control.as.rzk
        match: (?<=^|[.\\;,#"\]\[)(}{><|\s])as(?=$|[.\\;,#"\]\[)(}{><|\s])
  param-identifiers:
    patterns:
      - match: ((?![-?!.])[^.\\;,#"\]\[)(}{><|\s]*)(\s*(?![-?!.])[^.\\;,#"\]\[)(}{><|\s]*)*
        name: variable.parameter.rzk
  param-topes:
    patterns:
      - match: (\|)([^}]*)
        captures:
          "1":
            name: keyword.operator.param-topes.rzk
          "2":
            name: string.interpolated.rzk
            patterns:
              - include: "#builtins"
  ext-type-topes:
    patterns:
      []
      # - match: ([^|]*)(\|->|↦)
      #   captures:
      #     "1":
      #       name: string.interpolated.rzk
      #       patterns:
      #         - include: "#builtins"
      #     "2":
      #       name: keyword.operator.mapsto.rzk
  ext-types:
    patterns:
      - begin: \[
        end: \]
        patterns:
          - include: "#ext-type-topes"
          - include: "#terms"
  index-types:
    patterns:
      - begin: _{
        end: "}"
        name: comment.block.rzk
        patterns:
          - include: "#builtins"
          - include: "#index-types"
          - include: "#comments"
  params:
    patterns:
      - begin: \(\s*([^{:]+)\s*(:)(?=$|[.\\;,#"\]\[)(}{><|\s])
        end: \)
        beginCaptures:
          "1":
            patterns:
              - include: "#param-identifiers"
              - include: "#builtins"
              - include: "#comments"
          "2":
            name: keyword.operator.colon.params.rzk
        patterns:
          - include: "#terms"
      - begin: \{\s*([^:]+)\s*(:)(?=$|[.\\;,#"\]\[)(}{><|\s])
        end: "}"
        beginCaptures:
          "1":
            patterns:
              - include: "#param-identifiers"
              - include: "#builtins"
              - include: "#comments"
          "2":
            name: keyword.operator.colon.params.rzk
        patterns:
          - include: "#param-topes"
          - include: "#terms"
  lambda-abstractions:
    patterns:
      - begin: \b(\\)(?=$|[.\\;,#"\]\[)(}{><|\s])
        beginCaptures:
          "1":
            name: keyword.operator.lambda.slash.rzk
        end: (?<=^|[.\\;,#"\]\[)(}{><|\s])(->|→)
        endCaptures:
          "0":
            name: keyword.operator.lambda.to.rzk
        patterns:
          - include: "#params"
          - include: "#param-identifiers"
          - include: "#comments"
  comments:
    patterns:
      - name: comment.line.rzk
        match: (?<=^|[.\\;,#"\]\[)(}{><|\s])--.*$
  strings:
    name: string.quoted.double.rzk
    begin: '"'
    end: '"'
    patterns:
      - name: constant.character.escape.rzk
        match: \\.
  operators:
    patterns:
      - name: keyword.operator.rzk
        match: (?<=^|[.\\;,#"\]\[)(}{><|\s])(:=|->|:|→)(?=$|[.\\;,#"\]\[)(}{><|\s])
      - name: punctuation.equals.rzk
        match: (?<=^|[.\\;,#"\]\[)(}{><|\s])=(?=$|[.\\;,#"\]\[)(}{><|\s])
      - name: punctuation.comma.rzk
        match: ","
      - name: punctuation.multiplication.rzk
        match: (?<=^|[.\\;,#"\]\[)(}{><|\s])(\*|×)(?=$|[.\\;,#"\]\[)(}{><|\s])
      - name: keyword.operator.rzk
        match: (?<!(?<=^|[.\\;,#"\]\[)(}{><|\s])-)>|[\\|<]
scopeName: source.rzk
